python 3.10.11 64-bit

Image processing package: PIL (Pillow) > pip install pillow
Graphical User Interface Kit GUI: Tkinter > pip install tkinter
OS > pip install os
math > pip install math
numpy > pip install numpy
matplotlib.pyplot > python -m pip install -U matplotlib


functions:

open_img():
	open image
Uisng filedialog.askopenfilename()
	open_raw():
open raw image
	Uisng filedialog.askopenfilename(), Image.frombytes("L", (512, 512), x.read(), 'raw')
save_img():
	save image
	img.save("FILE NAME", "FORMAT")
reset_img():
	Remove all image processing on the originally opened image
resize_img():
	Zoom in and out of images using percentages
	mage.resize((width, height), resample)
rotate_img():
	Rotate picture
	Image.rotate( angle , resample)
lin_adj():
exp_adj():
log_adj():
	(A) linearly (Y = aX + b)
	(B) exponentially (Y = exp(aX + b))
	(C) logarithmically (Y = ln(aX + b), b > 1)
	X represents the grayscale value of each pixel in the picture.
	Convert X to new grayscale value Y to form a new image
gray_lvl_slc():
	Preserve out of bounds? Yes/No Button: Determine whether to preserve the grayscale value pixels outside Upperbound and Lowerbound. If not, set it to 0
display_htg():
	dispaly current histogram
	import matplotlib.pyplot as plt, plt.bar(), plt.show()
auto_level():
	Calculate the probability of each gray level appearing and multiply the original cumulative probability by 255
bit_plane():
	Convert the grayscale value into a binary position. The user inputs which digit to take. If the value is 0, the grayscale value is set to 0. If the value is 1, the grayscale value is set to 255.
smoothing():
	Average the grayscale values â€‹â€‹of nearby pixels and replace the middle pixels with the average value. The larger the value entered by the user, the larger the average range.
sharpening():
	Grayscale value of the original image * (input value + 1) - Grayscale value of the original image after smoothing * (input value)
median():
	Take the median of the grayscale values â€‹â€‹of nearby pixels and replace the middle pixel with the median. The larger the value entered by the user, the larger the range of values.
Laplacian():
	Grayscale value of the original image - Grayscale value of the converted image 
	(converted matrix: 
	[1, 1, 1,
	1, -8, 1,
	1, 1, 1] 
	9 converted values â€‹â€‹replace the original middle value)
log_mag_pha_img():
	Show Log|F(u, v)|, magnitude-only image, phase-only image.
	Using numpy, matplotlib.pyplot.subplots
	step1_5():
	step.1 Multiplying the image by (-1)^(x+y)
	step.2 Computing the DFT
	step.3 Taking the complex conjugate of the transform
	step.4 Computing the inverse DFT
	step.5 Multiplying the real part of the result by (-1)^(x+y)
	Using numpy, matplotlib.pyplot.subplots()
red_img():
	Show red component image.
	Using Image.Image.split()
	Take split_img[0]
green_img():
	show green component image.
	Using Image.Image.split()
	Take split_img[1]
blue_img():
	Show blue component image.
	Using Image.Image.split()
	Take split_img[2]
rgb_to_hsi(R ,G, B):
	RGB to HSI.
	Using math
hsi_to_rgb(h, s, i):
	HSI to RGB.
	Using math
rgb_to_h_s_i_subplot():
	Plot Hue, saturation, Intensity image by image's RGB value.
rgb_to_hsi():
	Using matplotlib.pyplot.subplots()
rgb_complements():
	RGB complements to enhance the detail.
	255 - rgb value
	Using Image.Image.split()
rgb_hsi_sharping():
	soomthing image and RGB Laplacian HSI Laplacian.
	Laplacian()
	Using matplotlib.pyplot.subplots()
seg_fea_mask():
	Segmenting the feathers(Obverse image's Hue and Saturation).
	rgb_to_hsi()
	Using matplotlib.pyplot.subplots()

<><><><><><><><><><><><><><><><><><><><><> Homework #3's problems <><><><><><><><><><><><><><><><><><><><><>

Problem. 1
Spatial Filters (degree): [ ] [Arithmetic mean smoothing]
Problem. 2
2D FFT: [do]
Problem. 3
DFT Step. (1)-(5): [do]
(b)
step. 1 (-1)^(x+y) The original white part of the block where x+y is an odd number of pixels is black.
step. 2 DFT time domain to frequency domain
step. 3 Take the conjugate of the imaginary number
step. 4 DFT inverse conversion from frequency domain to time domain
step. 5 Because of conjugation, the picture is upside down
Problem. 4
(a) [Display image]
(b) Component image: [do]
(c) Convert RGB to HSI: [do]
(d) RGB color complement (Enhance the detail): [do]
(e) Sharping with the Laplacian to this image by using RGB: [do] (This function takes a long time to runðŸ˜…It is not a bug)
(f) Segmenting the feathers: [do]

If you want to compare the differences before and after image processing, you can press the [Display image] button after completing each step to display the results of the current image processing.
[Reset current image] button to remove all image processing on the originally opened image
